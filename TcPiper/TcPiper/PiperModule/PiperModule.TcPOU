<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PiperModule" Id="{a49f2d62-e1fb-48a5-85f3-63c6ca0008b5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT PiperModule IMPLEMENTS IPiperModule, ISequence, IStepManager
VAR
    i_PiperModuleInternal : PiperModuleInternal;
    i_sequence : SequenceType;
    _sequence : Sequencer(THIS^);
    command : PLCopenCall;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
    </Implementation>
    <Folder Name="Handshake" Id="{4c5f2be6-50e2-4221-9823-927772de0d3d}" />
    <Folder Name="PackML" Id="{103dd83a-b3d9-4ad0-8c08-4f9980ee4239}" />
    <Folder Name="PackMLAsync" Id="{8d7f90b0-8dd2-435c-bd8c-5cc1b1fbb6fd}" />
    <Folder Name="PLCopen" Id="{64089310-c2b2-409b-a0ee-99363ab988ef}" />
    <Folder Name="Sequence" Id="{8453be56-3070-4e48-be57-e6bddaa0c622}">
      <Folder Name="callbacks" Id="{778d4fd5-4d6a-48ab-b39c-efcbe9f36276}" />
      <Folder Name="StateControl" Id="{6b001fba-3153-4b1f-932c-0a719f676126}" />
    </Folder>
    <Folder Name="Setup" Id="{eeb68776-0e62-46f1-9ad5-da0f6ad004d6}" />
    <Folder Name="StepManager" Id="{48dc10ce-7eca-4656-a440-fb808be36402}" />
    <Method Name="_RequestStep" Id="{f4f6af93-0cb3-42b4-9ca9-21e1cca56843}" FolderPath="StepManager\">
      <Declaration><![CDATA[METHOD _RequestStep : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.requestSubstate := nextStep;
i_PiperModuleInternal.response := RESPONSE_STATE.BUSY;
i_PiperModuleInternal.requestNumber := i_PiperModuleInternal.requestNumber + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Reset" Id="{e5c4fbde-1df8-48bc-9d3c-c9ad0b85ba57}" FolderPath="StepManager\">
      <Declaration><![CDATA[METHOD _Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_SequenceComplete" Id="{93d7990e-83cd-41da-874b-7bcab730bc0b}" FolderPath="StepManager\">
      <Declaration><![CDATA[METHOD _SequenceComplete : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.requestSubstate := 0;
i_PiperModuleInternal.response := RESPONSE_STATE.DONE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_SequenceError" Id="{d8c3afc4-de9e-411e-b9c4-728f5280910b}" FolderPath="StepManager\">
      <Declaration><![CDATA[METHOD _SequenceError : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.requestSubstate := 0;
i_PiperModuleInternal.response := RESPONSE_STATE.ERROR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborted" Id="{bfc1fdac-439e-4113-ad1e-f9923d22408a}" FolderPath="PLCopen\">
      <Declaration><![CDATA[METHOD Aborted : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_sequence.activeTasks.Aborted();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborting" Id="{f8a973b9-f9f6-410e-b5c1-d3a51e04d7ba}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Aborting : MACHINE_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.aborting := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AbortingAsync" Id="{cec06300-8aeb-4e42-9276-4c70e9317f91}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD AbortingAsync : MACHINE_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.aborting := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Booting" Id="{8c4cd35b-8b79-4b7d-b8d1-be00bdf7a998}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Booting : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.booting := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="BootingAsync" Id="{9ce4a9c1-65bb-4257-8807-dd0b22b34a12}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD BootingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.booting := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CallState" Id="{8c189048-9fa3-4697-bf51-2b2792a9dbd0}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD CallState : BOOL
VAR_INPUT

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

THIS^.WillCall();

IF THIS^.i_PiperModuleInternal.previousSubstate <> THIS^.CurrentSubstate THEN
    THIS^.WillChangeSubstate();
END_IF

THIS^.i_PiperModuleInternal.previousSubstate := THIS^.CurrentSubstate;

IF Response <> RESPONSE_STATE.DONE AND RequestedSubstate <= CurrentSubstate THEN
    CASE CurrentState OF
        MACHINE_STATE.ABORTING:
            IF NOT i_PiperModuleInternal.skipsSync.aborting THEN
                THIS^.Aborting();
            END_IF

        MACHINE_STATE.BOOTING:
            IF NOT i_PiperModuleInternal.skipsSync.booting THEN
                THIS^.Booting();
            END_IF

        MACHINE_STATE.CLEARING:
            IF NOT i_PiperModuleInternal.skipsSync.clearing THEN
                THIS^.Clearing();
            END_IF

        MACHINE_STATE.COMPLETING:
            IF NOT i_PiperModuleInternal.skipsSync.completing THEN
                THIS^.COMPLETING();
            END_IF

        MACHINE_STATE.EXECUTING:
            IF NOT i_PiperModuleInternal.skipsSync.executing THEN
                THIS^.Executing();
            END_IF

        MACHINE_STATE.HOLDING:
            IF NOT i_PiperModuleInternal.skipsSync.holding THEN
                THIS^.Holding();
            END_IF

        MACHINE_STATE.RESETTING:
            IF NOT i_PiperModuleInternal.skipsSync.resetting THEN
                THIS^.Resetting();
            END_IF

        MACHINE_STATE.STARTING:
            IF NOT i_PiperModuleInternal.skipsSync.starting THEN
                THIS^.Starting();
            END_IF

        MACHINE_STATE.STOPPING:
            IF NOT i_PiperModuleInternal.skipsSync.stopping THEN
                THIS^.Stopping();
            END_IF

        MACHINE_STATE.SUSPENDING:
            IF NOT i_PiperModuleInternal.skipsSync.suspending THEN
                THIS^.Suspending();
            END_IF

        MACHINE_STATE.UNHOLDING:
            IF NOT i_PiperModuleInternal.skipsSync.unholding THEN
                THIS^.Unholding();
            END_IF

        MACHINE_STATE.UNSUSPENDING:
            IF NOT i_PiperModuleInternal.skipsSync.unsuspending THEN
                THIS^.Unsuspending();
            END_IF

    END_CASE
END_IF

THIS^.DidCall();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CallStateAsync" Id="{e1b90424-eb8a-4298-af7b-9ebf7a18fd7f}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD CallStateAsync : BOOL
VAR_INPUT

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

THIS^.WillCallAsync();

IF THIS^.i_PiperModuleInternal.previousSubstateAsync <> THIS^.CurrentSubstate THEN
    THIS^.WillChangeSubstateAsync();
END_IF

THIS^.i_PiperModuleInternal.previousSubstateAsync := THIS^.CurrentSubstate;

IF Response <> RESPONSE_STATE.DONE AND RequestedSubstate <= CurrentSubstate THEN
    CASE CurrentState OF
        MACHINE_STATE.ABORTING:
            IF NOT i_PiperModuleInternal.skipsAsync.aborting THEN
                THIS^.AbortingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.aborting THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.BOOTING:
            IF NOT i_PiperModuleInternal.skipsAsync.booting THEN
                THIS^.BootingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.booting THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.CLEARING:
            IF NOT i_PiperModuleInternal.skipsAsync.clearing THEN
                THIS^.ClearingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.clearing THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.COMPLETING:
            IF NOT i_PiperModuleInternal.skipsAsync.completing THEN
                THIS^.CompletingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.completing THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.EXECUTING:
            IF NOT i_PiperModuleInternal.skipsAsync.executing THEN
                THIS^.ExecutingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.executing THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.HOLDING:
            IF NOT i_PiperModuleInternal.skipsAsync.holding THEN
                THIS^.HoldingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.holding THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.RESETTING:
            IF NOT i_PiperModuleInternal.skipsAsync.resetting THEN
                THIS^.ResettingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.resetting THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.STARTING:
            IF NOT i_PiperModuleInternal.skipsAsync.starting THEN
                THIS^.StartingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.starting THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.STOPPING:
            IF NOT i_PiperModuleInternal.skipsAsync.stopping THEN
                THIS^.StoppingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.stopping THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.SUSPENDING:
            IF NOT i_PiperModuleInternal.skipsAsync.suspending THEN
                THIS^.SuspendingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.suspending THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.UNHOLDING:
            IF NOT i_PiperModuleInternal.skipsAsync.unholding THEN
                THIS^.UnholdingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.unholding THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

        MACHINE_STATE.UNSUSPENDING:
            IF NOT i_PiperModuleInternal.skipsAsync.unsuspending THEN
                THIS^.UnsuspendingAsync();
            ELSIF i_PiperModuleInternal.skipsSync.unsuspending THEN
                i_PiperModuleInternal.response := RESPONSE_STATE.DONE;
            END_IF

    END_CASE
END_IF

THIS^.DidCallAsync();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckStatus" Id="{86f2cd85-d973-4227-9da3-ee4c3ed52cb2}" FolderPath="PLCopen\">
      <Declaration><![CDATA[METHOD PRIVATE CheckStatus : BOOL
VAR
    _commandIndex : INT;
    _anyAbort : BOOL;
    _anyBusy : BOOL;
    _anyError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

IF NOT i_sequence.statusChecked THEN
    //We cache the is abort so that we have a consistent 
    //	status for the whole state
    i_sequence.isError := i_sequence.activeTasks.isError;
    i_sequence.isAbort := i_sequence.activeTasks.isAbort;
    i_sequence.isDone := i_sequence.activeTasks.isDone;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{7bee31c9-141c-4358-8aca-33cad167ec8c}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Clearing : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.clearing := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearingAsync" Id="{f3e36a82-f507-456f-b94b-64cf7681213f}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD ClearingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.clearing := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Completing" Id="{a413a61c-6ca7-4fd3-9296-7d7fa43065a1}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Completing : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.completing := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompletingAsync" Id="{a25aad53-5324-4bcd-8931-defa299aa789}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD CompletingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.completing := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentState" Id="{a9acd7a7-2c0b-4c94-b2f1-fd8eff4ca549}" FolderPath="Handshake\">
      <Declaration><![CDATA[PROPERTY CurrentState : MACHINE_STATE
]]></Declaration>
      <Get Name="Get" Id="{f9b34f5c-82e0-4f78-84c5-ae373d09c208}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CurrentState := i_PiperModuleInternal.machine.PackMLState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentStep" Id="{674ced14-3f04-4cfd-8fdd-09d4136719f6}" FolderPath="StepManager\">
      <Declaration><![CDATA[PROPERTY CurrentStep : ENUM
]]></Declaration>
      <Get Name="Get" Id="{bf1b5077-fd19-49ed-99c4-4f1808c79d8e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CurrentStep := ULINT_TO_UDINT(i_PiperModuleInternal.machine.Substate);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentSubstate" Id="{88b27a69-ed23-442a-a3ec-53bdad984f5d}" FolderPath="Handshake\">
      <Declaration><![CDATA[PROPERTY CurrentSubstate : ULINT
]]></Declaration>
      <Get Name="Get" Id="{b3583fbe-c993-43b1-b2df-a70ec57198b2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CurrentSubstate := i_PiperModuleInternal.machine.Substate;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DidCall" Id="{5d73cdfc-bb8e-4ce5-9441-fb7bff95dddb}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD DidCall : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DidCallAsync" Id="{1c612e8f-0b57-4feb-b3a0-8272535d9fbf}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD DidCallAsync : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoStep" Id="{2460656a-9a34-4d02-b4bf-86513714621e}" FolderPath="Sequence\">
      <Declaration><![CDATA[METHOD DoStep : ENUM
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

DoStep := _sequence.DoStep();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Errored" Id="{06792213-1d5a-46af-b439-4e2d3ae32a97}" FolderPath="PLCopen\">
      <Declaration><![CDATA[METHOD Errored : BOOL
VAR_INPUT
    ID : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_sequence.activeTasks.Errored(ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Executing" Id="{7d2b0e0c-1f31-466b-8d1a-373403d052a1}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Executing : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.executing := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecutingAsync" Id="{f195c071-1809-4503-9600-76c76102562b}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD ExecutingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.executing := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{44756489-9d5d-4428-aeab-3bb684fa1b7a}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    machineIn : REFERENCE TO Piper;
    //	context : IPluginRunner;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
RegisterToMachine(machineIn);
//THIS^.setContext( context );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Finished" Id="{c79313eb-7bb8-4f2e-95d1-b7033d0c3362}" FolderPath="PLCopen\">
      <Declaration><![CDATA[METHOD Finished : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_sequence.activeTasks.Finished();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Holding" Id="{894a69b8-8e15-4bf4-acd5-ce7c5d137725}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Holding : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.holding := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldingAsync" Id="{c029deb6-41db-4d4c-af7b-1fd6e8644624}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD HoldingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.holding := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsAbort" Id="{2dcca336-a4f0-4f55-9876-b7ff3b24f026}" FolderPath="PLCopen\">
      <Declaration><![CDATA[PROPERTY IsAbort : BOOL]]></Declaration>
      <Get Name="Get" Id="{e020552a-3b08-4a7b-876e-0e16adbd262f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();
IsAbort := i_sequence.isAbort;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsDone" Id="{af18764f-0737-410b-95a0-2ab146c203c3}" FolderPath="PLCopen\">
      <Declaration><![CDATA[PROPERTY IsDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{86cfcbf8-6913-4a08-a2cd-03f06f59d324}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();
IsDone := i_sequence.isDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsError" Id="{ccf11f90-16bd-4026-9f26-622caad6e51f}" FolderPath="PLCopen\">
      <Declaration><![CDATA[PROPERTY IsError : BOOL]]></Declaration>
      <Get Name="Get" Id="{ac9dcd1c-2e71-4438-99fd-7782403a6099}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();
IsError := i_sequence.isError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAbort" Id="{516af93a-5d99-4bdf-960c-3294b3cb47e0}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnAbort : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnAbort := _sequence.OnAbort(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEntry" Id="{6689b526-5baa-4f23-b571-4ec7663af97d}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnEntry : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnEntry := _sequence.OnEntry();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{3514fd98-aade-49a4-8005-f8ef205958d8}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnError : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnError := _sequence.OnError(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExit" Id="{73e201fe-6ff5-45dc-ba48-16917ae7f7e3}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnExit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnExit := _sequence.OnExit();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnFailure" Id="{3f9573b7-b22b-45b2-a5b3-ac03573adb91}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnFailure : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnFailure := _sequence.OnFailure(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSuccess" Id="{2218590e-0706-443f-94cd-47156df6e0ea}" FolderPath="Sequence\callbacks\">
      <Declaration><![CDATA[METHOD OnSuccess : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

OnSuccess := _sequence.OnSuccess(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterToMachine" Id="{3f378610-e9ba-4ac4-ba6e-e297be53cd18}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD RegisterToMachine : DINT
VAR_INPUT
    machineIn : REFERENCE TO Piper;
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
IF NOT i_PiperModuleInternal.registered THEN
    i_PiperModuleInternal.registered := TRUE;
    i_PiperModuleInternal.machine REF= machineIn;
    i_PiperModuleInternal.machine.RegisterSubmodule(THIS^);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="RequestedSubstate" Id="{ca192a6a-e2d8-4eec-8bb5-126fe0cbacbb}" FolderPath="Handshake\">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY RequestedSubstate : ULINT
]]></Declaration>
      <Get Name="Get" Id="{b76addb0-caf3-43be-a1d2-774e6ae0391a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

RequestedSubstate := i_PiperModuleInternal.requestSubstate;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="RequestNumber" Id="{603863d1-8473-47c0-b2ce-fa34eb6e2919}" FolderPath="StepManager\">
      <Declaration><![CDATA[PROPERTY RequestNumber : DINT
]]></Declaration>
      <Get Name="Get" Id="{d46e1119-18d1-4a0c-ad96-ef1cba488e1d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

RequestNumber := i_PiperModuleInternal.requestNumber;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RequestStep" Id="{0e4176a8-3797-4a27-9ba5-06223fd5ae03}" FolderPath="Sequence\StateControl\">
      <Declaration><![CDATA[METHOD RequestStep : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

RequestStep := _sequence.requestStep(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestStepClear" Id="{e97e13d9-69d6-493d-a91f-a645bb23f6bb}" FolderPath="Sequence\StateControl\">
      <Declaration><![CDATA[METHOD RequestStepClear : BOOL
VAR_INPUT
    nextStep : ENUM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

RequestStepClear := _sequence.requestStepClear(nextStep);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{d15239fc-c709-4b5f-b06c-c65056e3acbe}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Resetting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.resetting := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResettingAsync" Id="{f993b6c7-b4af-4377-a0d6-8a2380615fa3}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD ResettingAsync : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.resetting := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Response" Id="{8eb07caf-319e-4b96-aa33-5592ef7d8262}" FolderPath="Handshake\">
      <Declaration><![CDATA[PROPERTY Response : RESPONSE_STATE]]></Declaration>
      <Get Name="Get" Id="{403fda28-4e41-44b0-8df2-3a36eb884c0a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

Response := i_PiperModuleInternal.response;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Run" Id="{403e4da3-736c-4b46-bfe8-d21525e61697}">
      <Declaration><![CDATA[METHOD Run : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

THIS^.CallState();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceAbort" Id="{382ae541-7c29-4690-b84d-2cbc2d1546e3}" FolderPath="Sequence\StateControl\">
      <Declaration><![CDATA[METHOD SequenceAbort : BOOL
VAR_INPUT
    ErrorCode : DINT;
    ErrorMessage : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

SequenceAbort := _sequence.sequenceAbort(ErrorCode, ErrorMessage);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceComplete" Id="{e7a11495-e96e-44f3-b8dd-fb20c40130d2}" FolderPath="Sequence\StateControl\">
      <Declaration><![CDATA[METHOD SequenceComplete : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

SequenceComplete := _sequence.sequenceComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceError" Id="{6e2cc27d-5672-4397-b236-2cd116232adf}" FolderPath="Sequence\StateControl\">
      <Declaration><![CDATA[METHOD SequenceError : BOOL
VAR_INPUT
    ErrorCode : DINT;
    ErrorMessage : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

SequenceError := _sequence.sequenceError(ErrorCode, ErrorMessage);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetContext" Id="{f6595b8f-ae99-4b2e-85fc-1c2a518ea4e4}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD SetContext : BOOL
VAR_INPUT
    context : IPluginRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
i_PiperModuleInternal.context := context;
context.RegisterPlugin(THIS^);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetState" Id="{86fb48a2-6e78-48ff-9d41-f8e50cfe20ac}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD SetState : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.requestSubstate := 0;
i_PiperModuleInternal.response := RESPONSE_STATE.UNDEFINED;
_sequence.startSequence();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{0fbe109f-325f-4002-b69e-be08f70d2754}" FolderPath="PLCopen\">
      <Declaration><![CDATA[METHOD Start : BOOL
VAR_INPUT
    Command : IPLCopenCommand;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

IF i_sequence.activeTasks.Start(Command) = 0 THEN
    //TODO: All out of commands.. Throw an error
    SequenceError(10000, 'Too Many Commands in 1 step');
    Start := FALSE;
ELSE
    Start := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{a86c3956-3fb4-4d94-b103-59d08284b030}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Starting : MACHINE_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.starting := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartingAsync" Id="{f0a9676d-2362-4f42-9b4a-07835a470b0e}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD StartingAsync : MACHINE_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.starting := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartSequence" Id="{cf35b5b2-fbce-4fdb-a962-ec55492f889b}" FolderPath="Sequence\">
      <Declaration><![CDATA[METHOD StartSequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

RequestStep(0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateCompletePending" Id="{3c3f8f98-6626-4764-a216-4b263314b59d}" FolderPath="Handshake\">
      <Declaration><![CDATA[METHOD StateCompletePending : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.response := RESPONSE_STATE.DONE_PENDING;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateErrored" Id="{3ac147a4-b6ee-453f-bca1-363fc1d7eaed}" FolderPath="Handshake\">
      <Declaration><![CDATA[METHOD StateErrored : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.response := RESPONSE_STATE.ERROR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{301f156c-360f-470c-88cd-689b56d4fe1f}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Stopping : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.stopping := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoppingAsync" Id="{ecb23d71-1a43-461c-aa40-2add24e1194d}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD StoppingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.stopping := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspending" Id="{bf1c4eed-ae50-4104-8c79-3a268c628404}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Suspending : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.suspending := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendingAsync" Id="{f3583032-054c-4d43-8d68-39f2c7f4866f}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD SuspendingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.suspending := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Undefined" Id="{dce2f0f3-de0c-4095-9eb2-087dc401d55d}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Undefined : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.response := RESPONSE_STATE.NO_IMPL;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UndefinedAsync" Id="{df63348c-7f98-4cdb-8860-51cf22a0da80}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD UndefinedAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unholding" Id="{3eb5a5dc-5d0d-486e-947a-67764a0c3038}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Unholding : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.unholding := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnholdingAsync" Id="{d6a9e8cc-d336-42ad-8812-a767d9f87070}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD UnholdingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.unholding := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspending" Id="{d7a887dc-24e3-45a9-bfab-9b8c964676e6}" FolderPath="PackML\">
      <Declaration><![CDATA[METHOD Unsuspending : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsSync.unsuspending := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnsuspendingAsync" Id="{b8341822-21e7-482e-b82c-93c76e5c31dc}" FolderPath="PackMLAsync\">
      <Declaration><![CDATA[METHOD UnsuspendingAsync : MACHINE_STATE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

i_PiperModuleInternal.skipsAsync.unsuspending := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WillCall" Id="{e88ecae5-093b-4df2-8a31-55fa62529e6c}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD WillCall : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WillCallAsync" Id="{3da853bb-6490-4d04-a4d1-57912c1a0048}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD WillCallAsync : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WillChangeSubstate" Id="{7dcc840a-b340-4d0d-8cb4-fe075b5c4c05}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD WillChangeSubstate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WillChangeSubstateAsync" Id="{538c49c4-4889-4a9f-b501-4dace4dcbf3f}" FolderPath="Setup\">
      <Declaration><![CDATA[METHOD WillChangeSubstateAsync : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>